DROP TABLE IF EXISTS M_MESSAGE, M_USER, M_USER_IN_CHAT, M_CHAT, M_USER_ACTION, M_USER_PROFILE, M_USER_ROLE, M_USER_STATUS, M_LOG,M_NOTIFICATION CASCADE;

DROP FUNCTION IF EXISTS register, login,get_messages_from_chat, get_messages_for_user_in_chat, get_chats_for_user, get_last_message_in_chat, register_action, vote_on_user,
	add_message_action, add_chat_action, leave_chat_action, join_chat_action;
CREATE TABLE M_USER
(
    ID    serial PRIMARY KEY,
    PASSWORD        TEXT NOT NULL,
	LOGIN        VARCHAR(50) NOT NULL UNIQUE
);

CREATE INDEX ON M_USER USING HASH(ID);

CREATE TABLE M_CHAT
(
    ID    serial PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL
);
CREATE INDEX ON M_CHAT USING HASH(ID);

CREATE TABLE M_MESSAGE
(
    ID    serial PRIMARY KEY,
    SENDER_ID   INTEGER REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	CHAT_ID     INTEGER REFERENCES M_CHAT ON DELETE CASCADE NOT NULL,
	SEND_TIME TIMESTAMP,
	DATA TEXT NOT NULL
);

CREATE INDEX ON M_MESSAGE USING HASH(ID);

CREATE TABLE M_USER_ROLE
(
	ID    serial PRIMARY KEY,
    PRIORITY INTEGER NOT NULL DEFAULT 0,
	NAME  VARCHAR(20) NOT NULL,
	DESCRIPTION VARCHAR(20),
	SEND_MESSAGE BOOLEAN DEFAULT TRUE,
	SEND_NOTIFICATION BOOLEAN DEFAULT TRUE,
	DELETE_MESSAGE BOOLEAN DEFAULT FALSE,
	ADD_USER BOOLEAN DEFAULT FALSE,
	BAN_USER BOOLEAN DEFAULT FALSE,
	EDIT_CHAT BOOLEAN DEFAULT FALSE
);
ALTER TABLE M_USER_ROLE ADD CONSTRAINT UniqueRole UNIQUE(NAME);

CREATE TABLE M_USER_IN_CHAT
(
    USER_ID   INTEGER REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	CHAT_ID INTEGER REFERENCES M_CHAT ON DELETE CASCADE NOT NULL,
	ROLE_ID  INTEGER REFERENCES M_USER_ROLE ON DELETE CASCADE NOT NULL,
	JOIN_TIME TIMESTAMP 
);
CREATE INDEX ON M_USER_IN_CHAT USING HASH(USER_ID);

CREATE TABLE M_USER_STATUS
(
	ID    serial PRIMARY KEY,
    USER_ID   INTEGER REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	NAME  VARCHAR(20) NOT NULL,
	DESCRIPTION VARCHAR(20)
);
ALTER TABLE M_USER_STATUS ADD CONSTRAINT UniqueStatusForUser UNIQUE(USER_ID, NAME);

CREATE INDEX ON M_USER_STATUS USING HASH(USER_ID);



CREATE TABLE M_USER_PROFILE
(
    USER_ID   INTEGER unique REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	RATING int default 0
);
CREATE INDEX ON M_USER_PROFILE USING HASH(USER_ID);


CREATE TABLE M_NOTIFICATION
(
	ID    serial PRIMARY KEY,
    USER_ID   INTEGER REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	CHAT_ID INTEGER REFERENCES M_CHAT ON DELETE CASCADE,
	SEND_TIME TIMESTAMP,
	DATA TEXT,
	TYPE VARCHAR(20) NOT NULL

);
CREATE INDEX ON M_NOTIFICATION USING HASH(USER_ID);

CREATE OR REPLACE FUNCTION register(_login varchar(20), _password varchar(20))  
returns int
language plpgsql  
as  
$$  
DECLARE _id int;
BEGIN  
INSERT INTO M_USER (LOGIN,PASSWORD)
VALUES(_login, _password)
RETURNING ID INTO _id;
RETURN _id;
END;  
$$;  

CREATE OR REPLACE FUNCTION login(_login varchar(20), _password varchar(20))  
returns int
language plpgsql  
as  
$$  
DECLARE _id int = NULL;
BEGIN  
SELECT ID INTO _id from M_USER WHERE (LOGIN = _login and PASSWORD = _password);
IF (_id IS NULL) THEN
    RAISE INFO 'No such user';
END IF;
INSERT INTO M_USER_STATUS(USER_ID,NAME) VALUES(_id,'ONLINE');
RETURN _id;
END;  
$$;  

CREATE OR REPLACE PROCEDURE logout(_login varchar(20), _password varchar(20))  
language plpgsql  
as  
$$  
DECLARE _id int = NULL;
BEGIN  
SELECT ID INTO _id from M_USER WHERE (LOGIN = _login and PASSWORD = _password);
DELETE FROM M_USER_STATUS WHERE  (M_USER_STATUS.USER_ID = _id and M_USER_STATUS.NAME = 'ONLINE');
END;  
$$;

CREATE OR REPLACE PROCEDURE vote_on_user(_user_id int, positive bool default true)  
language plpgsql  
as  
$$  
BEGIN  
UPDATE M_USER_PROFILE SET RATING = CASE WHEN (positive) then RATING+1 else RATING-1 end 
WHERE M_USER_PROFILE.USER_ID = _user_id;
END;  
$$;

CREATE OR REPLACE FUNCTION GET_MESSAGES_FOR_USER_IN_CHAT(_user_id int, _chat int)  
returns TABLE(ID int, SENDER_ID int, SENDER VARCHAR(50), MESSAGE TEXT, SEND_TIME TEXT)  
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT M_MESSAGE.ID,SENDER.ID,SENDER.LOGIN, M_MESSAGE.DATA, TO_CHAR(M_MESSAGE.SEND_TIME,  'MM-DD-YYYY HH24:MI:SS')
	FROM M_USER CUR_USER
	JOIN M_MESSAGE ON (M_MESSAGE.CHAT_ID = _chat)-- AND M_MESSAGE.SENDER_ID <> CUR_USER.ID)
	JOIN M_USER SENDER ON M_MESSAGE.SENDER_ID = SENDER.ID
	WHERE CUR_USER.ID = _user_id
	ORDER BY M_MESSAGE.ID;
	
END;  
$$;  

CREATE OR REPLACE FUNCTION GET_MESSAGES_FROM_USER_IN_CHAT(_user_id int, _chat int)  
returns TABLE(ID int, SENDER_ID int, SENDER VARCHAR(50), MESSAGE TEXT, SEND_TIME TEXT)  
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT M_MESSAGE.ID,SENDER.ID,SENDER.LOGIN, M_MESSAGE.DATA, TO_CHAR(M_MESSAGE.SEND_TIME,  'MM-DD-YYYY HH24:MI:SS')
	FROM M_USER CUR_USER
	JOIN M_MESSAGE ON (M_MESSAGE.CHAT_ID = _chat)-- AND M_MESSAGE.SENDER_ID <> CUR_USER.ID)
	JOIN M_USER SENDER ON M_MESSAGE.SENDER_ID = SENDER.ID
	WHERE M_MESSAGE.SENDER_ID = _user_id

	ORDER BY M_MESSAGE.ID;
	
END;  
$$;  
CREATE OR REPLACE PROCEDURE delete_messages_from_user(_user_id int, _chat_id int)  
language plpgsql  
as  
$$   
BEGIN  
DELETE FROM M_MESSAGE WHERE (SENDER_ID=_user_id and CHAT_ID=_chat_id);
END;  
$$;  


CREATE OR REPLACE PROCEDURE add_user_status_unique(_user_id int, _status varchar(20))  
language plpgsql  
as  
$$   
BEGIN  
INSERT INTO M_USER_STATUS(USER_ID, NAME) VALUES (_user_id, _status) ON CONFLICT DO NOTHING;
END;  
$$;  

CREATE OR REPLACE FUNCTION GET_MESSAGES_FROM_CHAT(_chat int)  
returns TABLE(ID int, SENDER_ID int, SENDER VARCHAR(50), MESSAGE TEXT, SEND_TIME TEXT)  
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT M_MESSAGE.ID,SENDER.ID,SENDER.LOGIN, M_MESSAGE.DATA, TO_CHAR(M_MESSAGE.SEND_TIME,  'MM-DD-YYYY HH24:MI:SS')
	FROM M_USER CUR_USER
	JOIN M_MESSAGE ON (M_MESSAGE.CHAT_ID = _chat)-- AND M_MESSAGE.SENDER_ID <> CUR_USER.ID)
	JOIN M_USER SENDER ON M_MESSAGE.SENDER_ID = SENDER.ID
	ORDER BY M_MESSAGE.ID;
END;  
$$;  


CREATE OR REPLACE FUNCTION get_chats_for_user(_user_id int)  
RETURNS SETOF M_CHAT
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT M_CHAT.ID, M_CHAT.NAME
   FROM M_USER
	JOIN M_USER_IN_CHAT ON M_USER_IN_CHAT.USER_ID = M_USER.ID 
	JOIN M_CHAT ON M_CHAT.ID = M_USER_IN_CHAT.CHAT_ID
	WHERE M_USER.ID = _user_id;
END;  
$$;  

CREATE OR REPLACE FUNCTION get_notifications_for_user(_user_id int, _type varchar(20))  
RETURNS SETOF M_NOTIFICATION
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT *
   FROM M_NOTIFICATION
   WHERE M_NOTIFICATION.USER_ID = _user_id
   AND M_NOTIFICATION.TYPE = _type;
END;  
$$;  

CREATE OR REPLACE FUNCTION get_notifications_for_user(_user_id int)  
RETURNS SETOF M_NOTIFICATION
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT *
   FROM M_NOTIFICATION
   WHERE M_NOTIFICATION.USER_ID = _user_id;
END;  
$$;  

CREATE OR REPLACE FUNCTION add_message_action()
RETURNS trigger AS 
$$   
BEGIN  
	UPDATE M_MESSAGE SET SEND_TIME = NOW()::TIMESTAMP WHERE ID = NEW.ID;
	RETURN NEW;
END;  
$$ language plpgsql ;  


CREATE OR REPLACE FUNCTION add_notification_action()
RETURNS trigger AS 
$$   
BEGIN  
	UPDATE M_NOTIFICATION SET SEND_TIME = NOW()::TIMESTAMP WHERE ID = NEW.ID;
	RETURN NEW;
END;  
$$ language plpgsql ;  




CREATE OR REPLACE FUNCTION join_chat_action()
RETURNS trigger AS 
$$   
BEGIN  
   	UPDATE M_USER_IN_CHAT SET JOIN_TIME = NOW()::TIMESTAMP WHERE CHAT_ID = NEW.CHAT_ID;
	RETURN NEW;
END;  
$$ language plpgsql ; 

CREATE TRIGGER UserSendMessageInfo AFTER INSERT ON M_MESSAGE
FOR EACH ROW EXECUTE PROCEDURE add_message_action();

CREATE TRIGGER ChatJoinInfo AFTER INSERT ON M_USER_IN_CHAT
FOR EACH ROW 
EXECUTE PROCEDURE join_chat_action();

CREATE TRIGGER AddNotificationInfo AFTER INSERT ON M_NOTIFICATION
FOR EACH ROW 
EXECUTE PROCEDURE add_notification_action();




INSERT INTO M_USER_ROLE (PRIORITY, NAME, SEND_MESSAGE, SEND_NOTIFICATION, DELETE_MESSAGE, ADD_USER, BAN_USER, EDIT_CHAT)
VALUES (0, 'REGULAR', TRUE, FALSE, FALSE, FALSE, FALSE, FALSE);
INSERT INTO M_USER_ROLE (PRIORITY, NAME, SEND_MESSAGE, SEND_NOTIFICATION, DELETE_MESSAGE, ADD_USER, BAN_USER, EDIT_CHAT)
VALUES (10000, 'CREATOR', TRUE, TRUE, TRUE, TRUE, TRUE, TRUE);
INSERT INTO M_USER_ROLE (PRIORITY, NAME, SEND_MESSAGE, SEND_NOTIFICATION, DELETE_MESSAGE, ADD_USER, BAN_USER, EDIT_CHAT)
VALUES (1, 'ADMIN', TRUE, TRUE, FALSE, TRUE, TRUE, FALSE);
